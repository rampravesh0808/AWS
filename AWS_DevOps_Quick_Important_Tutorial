------ Pre-requisite to Provisioning EC2 Machinces --------------	
VPC(Virtual Private Cloud)
	1. Create VPC (192.168.0.0/16)->Choose CIDR ipv4
	2. Create Subnet Public (192.168.1.0/24) and Private (192.168.2.0/24)
	3. Create Public and Private Route Table, attach public and private subnet correspondingly.
	4. Create And Associate Internet Gateway to VPC.
	6. So Open Public route table and guide public subnet traffic to internet gateway.
	

Security
	NACL is subnet level security
	1. Create Public and Private Network NACL
	2. Add Inboud Traffic Rule in NACL
	3. Add Outbound traffic Rule in NACL.
		
	
	Security Groups:
	Instance level security is enabled by security group
	1. Create Public and Private Security Groups
	2. Add In-Bound Rule
	3. Add Out-Bound Rule.
	

------ EC2 Provisioning-Windows Machinces --------------	
	1. Select service EC2
	2. Go To Instances
	3. Launch Instance.
	4. Choose Choose an Amazon Machine Image (AMI) as per requirement, Here 'Microsoft Windows Server 2019 Base - ami-08db69d5de9dc9245'
	5. Go Choose Instance Type Tab and Choose CPU Free tier eligible.
	6. Go to Configure Instance, Choose VPC and Public subnet created in pre-requisite step and Enable Public IP to be provision.
	7. Go to add Add Storage and choose as per requirement, Here, Going with default.
	5. Add Tags is caption.
	6. Configure Security Group, Select the security group as your security to be imposed, Here, choosing existing created in pre-prequisite step.
	7. Review and Click on Launch.
	8. Create Key Pair and decrypt the password.
	Now, wait for 2 minutes till VM gets ready....
	Click on View Instances...
	9. Now, select VM and click on Connect and download RDP
	10. Run the RDP file and provided the decrypted password.
	
	
------ EC2 Provisioning-Linux Machinces --------------
	Provison Linux Machine
	Install webserver like Apache n all on linux server to access machine via browser.

	#!bin/bash
	cd
	sudo su
	apt-get update -y
	apt-get install apache2 git -y
	cd /var/www/html/
	git clone https://github.com/rampravesh0808/WebAppHtml.git
	
	
	Linux EC2 Machine accessible via SSH, so need Putty
	Putty Software
	PuttyZen Software
	
	----------- DevOps-Continous Integration using JENKINS ---------------------
	
	--- Install Jenkins-----
	1. Download Jenkins 'Generic Java Packaage (.war)'
	2. Copy at working location as installation file.
	3. Open Command prompt and run the below command to start jenkins
		java -jar jenkins.war --httpPort=9090
		
	4. Open localhost on port and enter admin password
		like 6ebb6f190e994635a3beacaec2566603
		
	5. Install suggested plugins.
	
	6. Create Admin Users
	
	---- Create Job in Jenkins for Maven Project------
	1. Create Job -> Free Style Project 
	2. Go Tab General -> Source Code Managment -> Git
	3. Copy Git URL https://github.com/rampravesh0808/WebAppMaven.git
	4. Add Credentials for 1st time.
	5. Go To Build and choose Invoke top-level Maven Targets
		Type command : clean install
		
	6. Save the job
	
	---Manually Copy the Jar file to AWS bucket S3---
	7. Make sure installed aws CLI, open Command Prompt and run below command
	8. aws s3 cp my-app-1.0-SNAPSHOT.jar s3://kram-s3-us-east2/my-app-1.0-SNAPSHOT.jar
	
	---JENKINS build the jar and Copy the Jar file to AWS bucket S3 automatically------
	9. Now, Go to Jenkins and open Maven project->Configure->Buil Tab -> Execute Windows Batch Command and type below -
		cd C:\Users\Etisalat\.jenkins\workspace\AWS-WebAppMaven\target\
		aws s3 cp my-app-1.0-SNAPSHOT.jar s3://kram-s3/my-app-1.0-SNAPSHOT.jar
		
	10. Apply->Save and Run the build. 
		You will find jar file will be uploaded to AWS S3 storage.




----------- AWS and DevOps-DevOps-Learning about Configuration Managment Tools- Chef -----------

1. Provision 3 EC2 machine using Ubuntu AMI
2. Userdata
	#!bin/bash
	cd
	sudo su
	apt-get update -y


3. Login to hosted cheaf
	https://manage.chef.io/

   	a) Go to Administrator Tab
	b) Select Organization name
	c) Click on Started KIT and downlaod the same.


4. Copy chef repo downloaded folder at workspace.

5. Download chef dk and installation and set the path.
	https://downloads.chef.io/chefdk/

	Open cmd and check below command
	chef --version
	knife --version


6. Generate web cookbook
	chef generate cookbooks cookbooks/web

	Go to google and search receipe 'coockbooks for apache2 ubuntu'
	Ref: https://www.linode.com/docs/applications/configuration-management/creating-your-first-chef-cookbook/

	Copy following code and paste into recepie file.
	
		package "php" do
		  action :install
		end

		package "php-pear" do
		  action :install
		end

		package "php-mysql" do
		  action :install
		end

		package "libapache2-mod-php" do
		  action :install
		end


	Upload cookbook to hosted chef using CLI
		knife upload cookbook cookbooks/web

7. Gererate App Cookbook
	chef generate cookbooks cookbooks/app

	Go to google and search receipe 'coockbooks for apache2 ubuntu'
	Ref: https://www.linode.com/docs/applications/configuration-management/creating-your-first-chef-cookbook/

	Copy following code and paste into recepie file.
	
		execute "apt-get update" do
		  command "apt-get update"
		end

		package "apache2" do
		  action :install
		end

		service "apache2" do
		  action [:enable, :start]
		end

	Upload cookbook to hosted chef using CLI
		knife upload cookbook cookbooks/app


Go to hosted chef server and check will found cookbook web and app will be uploaded.


8. Now, coonect Chef hosted server to AWS instances to run the web and app configurations.
Will be using bootstrap for same and aws CLI, run below command

	knife bootstrap 34.220.123.72 --ssh-user ubuntu --sudo --ssh-identity-file C:\Users\Etisalat\Desktop\AWS\chef\chef-repo\.chef\Oregon-Key-Pair.pem --node-name web-cookbook-1 --run-list 'recipe[web::apache-cb]'

	knife bootstrap 54.202.210.76 --ssh-user ubuntu --sudo --ssh-identity-file C:\Users\Etisalat\Desktop\AWS\chef\chef-repo\.chef\Oregon-Key-Pair.pem --node-name app-cookbook-1 --run-list 'recipe[app::php-cb]'

	knife bootstrap 34.215.171.133 --connection-user ubuntu --sudo --ssh-identity-file C:\Users\Etisalat\Desktop\AWS\chef\chef-repo\.chef\Oregon-Key-Pair.pem --node-name app-cookbook-2 --run-list 'recipe[app::php-cb]'



------------- AWS and DevOps-DevOps-Learning about Configuration Managment Tools- Ansible ---------------
1. Provision 4 EC2 machine and choose Ubuntu image.
	User Data:
	#!/bin/bash
	sudo su
	cd
	apt-get update -y
	apt-get install python -y
	
2. Name all 4 EC2 machine and record private and public ip of each EC2 intances
	master	3.15.15.27		192.168.1.65
	web01	3.15.229.74		192.168.1.173
	web02	3.22.71.176		192.168.1.131
	app		3.133.109.249	192.168.1.222
	
3. Login to all 4 EC2 instances and set hostname of each.
	sudo su
	cd
	hostname [master/web01/web02/app]
	
4. Login to master 
	a)install ansible
	sudo su
	cd
	apt-get update -y
	apt install ansible
	
	b) 
	cd /etc/ansible/
	Take back up of ansible.cfg (cp ansible.cfg ansible.cfg.backup)
	Take back up of hosts (cp hosts hosts.backup)
	vi hosts and [webservers] and [appservers] public IP
	
	ansible -m ping webservers
		Error: Failed to connect to the host via ssh:  Permission denied (publickey).
	ansible -m ping appservers
		Error: Failed to connect to the host via ssh:  Permission denied (publickey).
		
	Try ssh webservers and appservers
	ssh 192.168.1.173
	ssh 192.168.1.131
	ssh 192.168.1.222
		Error: Permission denied (publickey).
		
		
	Generate ssh-key for handshake.
	Command: ssh-keygen
	
	cd /root/.ssh/
	copy id_rsa.pub public key and paste into authorized_keys file into webservers and appservers
	
	
	ansible -m ping webservers
		192.168.1.131 | SUCCESS => {
			"changed": false,
			"ping": "pong"
		}
		192.168.1.173 | SUCCESS => {
			"changed": false,
			"ping": "pong"
		}

		
	ansible -m ping appservers
		192.168.1.222 | SUCCESS => {
			"changed": false,
			"ping": "pong"
		}

	
	root@master:~# ansible -m ping all
		x
		192.168.1.131 | SUCCESS => {
			"changed": false,
			"ping": "pong"
		}
		192.168.1.173 | SUCCESS => {
			"changed": false,
			"ping": "pong"
		}

	
	Now create the playbook file and write the configurations.
	vi apache-pb.yml
	
	---
	- hosts: <name of the webservers>
	  tasks:
		- name: Installs apache on Web server
		  apt: pkg=apache2 state=installed update_cache=true
		  notify:
			- start apache2

	  handlers:
		- name: start apache2
		  service: name=apache2 state=started
		  
		  
	save and run the below command to install as per playbook configurations
	ansible-playbook -s apache-pb.yml
	
	

		
---------------- 29-Beta-AWS and DevOps-DevOps-Learning about Containerization Using Dockers ----------------
Steps to be followed
1.Create an account at hub.docker.com with docker-id
2.Create a repository under the docker hub account
3.Create a github repository otherwise follow directly step 4.
4.Use the github https://github.com/rampravesh0808/AWSDockerDemoApp
5.AWSDockerDemoApp contains Dockerfile under root directory and has the following commands to Dockerfile
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Contents of Dockerfile
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

FROM ubuntu:12.04
# Install dependencies
RUN apt-get update -y
RUN apt-get install -y git curl apache2 php5 libapache2-mod-php5 php5-mcrypt php5-mysql
# Install app
RUN rm -rf /var/www/*
ADD src /var/www
# Configure apache
RUN a2enmod rewrite
RUN chown -R www-data:www-data /var/www
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2
EXPOSE 80
CMD ["/usr/sbin/apache2", "-D",  "FOREGROUND"]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

====================================
Docker creation on AWS EC2 instances
====================================
6.Create an EC2 instances, which play role as Host Instance for running Docker on it

8. Connect and loging to EC2 Docker Machince and Run the following commands
sudo su
yum update -y
yum install docker -y
service docker start
usermod -a -G docker ec2-user 		//add ec2-user to group docker ,to execute commands on behalf of ec2-user
docker info

yum install git -y
git clone https://github.com/rampravesh0808/AWSDockerDemoApp.git
cd AWSDockerDemoApp
docker build -t macrpravesh08/aws_dhub:latest .
docker images    //listing the docker
docker push macrpravesh08/aws_dhub:latest
	if Permission denied because, required to login into Docker Hub account on Docker Server(EC2). then run below command 
		docker login
		
		docker push macrpravesh08/aws_dhub:latest
				
docker run -p 80:80 macrpravesh08/aws_dhub:latest

10.		Open browser and type <<Public Ip of EC2>>:80

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

11.		For Newer Committs from source, we need to build the system for every commit=====> push from local folder(git repository-AWSDockerDemoApp)



--------------- Good Job ----------------


=========================================================================================================
13.AUTOMATED BUILD:
=========================================================================================================
please run the following commands to remove all containers
		$ docker container ls							//listing the cotinaers
		$ docker kill $(docker ps -q)             	//stop all containers:
		$ docker rm $(docker ps -a -q)				//remove all containers
		$ docker rmi $(docker images -q)				//Remove -Images

14.		For Automated build Using the docker hub account, please follow the below mentioned steps
14.a.	Click "Create Automated build" ====>"Create Auto build,GITHUB"
14.b.	Link your GITHUB account,and sync with github repo <<githubrepo-manualbuild>>

15.		Please make changes to src folder(application content),GITHUB reads the changes to Application content
16. 	Every commit to master git repo will trigger the docker to build a new images,and run commands in Automated build (13) to remove containers
		docker pull rsharathsaee/githubrepo-manualbuild
		docker run -p 80:80 rsharathsaee/githubrepo-manualbuild
	
	
	
	

		

	
	
	
